cost = 2^(0:4))
# Kernel RBF
modelo.2$tune <- tune.svm(Chance.of.Admit~., data = Admissions.2, kernel = "radial.basis",
gamma = seq(0.025, 0.15, 0.025),
cost = 2^(0:4))
# Kernel RBF
modelo.2$tune <- tune.svm(Chance.of.Admit~., data = Admissions.2, kernel = "radialbasis",
gamma = seq(0.025, 0.15, 0.025),
cost = 2^(0:4))
# Kernel RBF
modelo.2$tune <- tune.svm(Chance.of.Admit~., data = Admissions.2, kernel = "rbf",
gamma = seq(0.025, 0.15, 0.025),
cost = 2^(0:4))
modelo.2$model <- svm(Chance.of.Admit~., Admissions.2,
gamma = 0.025, cost = 1)
pred.2 <- tibble(y = Admissions.2$Chance.of.Admit, yhat = predict(modelo.2$model, Admissions.2), Modelo = 2)
training.results <- bind_rows(pred.1, pred.2, pred.3, pred.4, pred.5)
model.results <- training.results %>%
mutate(e2 = (y - yhat)^2) %>%
group_by(Modelo) %>%
summarise(RMSE = sqrt(mean(e2)))
model.results
model.results <- training.results %>%
mutate(e2 = (y - yhat)^2) %>%
summarise(RMSE = sqrt(mean(e2)))
model.results
modelo.2$tune
modelo.2$model <- svm(Chance.of.Admit~., Admissions.2,
gamma = 0.025, cost = 1)
pred.2 <- tibble(y = Admissions.2$Chance.of.Admit, yhat = predict(modelo.2$model, Admissions.2), Modelo = 2)
training.results <- bind_rows(pred.1, pred.2, pred.3, pred.4, pred.5)
model.results <- training.results %>%
mutate(e2 = (y - yhat)^2) %>%
group_by(Modelo) %>%
summarise(RMSE = sqrt(mean(e2)))
model.results
model.results <- training.results %>%
mutate(e2 = (y - yhat)^2) %>%
summarise(RMSE = sqrt(mean(e2)))
model.results
# Obtener el RMSE
modelo.2 <- get_model_fitness(Admissions.2, predictors = gen.hist.2$final.inputs, label="Chance.of.Admit")
pred.2 <- tibble(y = Admissions.2$Chance.of.Admit, yhat = predict(modelo.2$model, Admissions.2), Modelo = 2)
training.results <- bind_rows(pred.1, pred.2, pred.3, pred.4, pred.5)
model.results <- training.results %>%
mutate(e2 = (y - yhat)^2) %>%
#summarise(RMSE = sqrt(mean(e2)))
group_by(Modelo) %>%
summarise(RMSE = sqrt(mean(e2)))
model.results
modelo.3$model
model.results <- training.results %>%
mutate(e2 = (y - yhat)^2) %>%
#summarise(RMSE = sqrt(mean(e2)))
group_by(Modelo) %>%
summarise(RMSE = sqrt(mean(e2)))
model.results
# Generación del conjunto de prueba
# ---------------------------------
Admissions.test <- read.csv("econometria-ug-2019/test.csv")
model.results <- training.results %>%
mutate(e2 = (y - yhat)^2) %>%
summarise(RMSE = sqrt(mean(e2)))
model.results
get_model_results <- function(data, modelobj) {
y <- data$Chance.of.Admit
yhat <- predict(modelobj, data)
rmse = sqrt(mean((y - yhat)^2))
return(rmse)
}
get_model_results(Admissions.2, modelo.2$model)
get_model_results(Admissions.1, modelo.1$model)
get_model_results(Admissions.1, modelo.1$model)
# Variables en niveles para los modelos de SVR
Admissions.2 <- Admissions %>%
dplyr::filter(University.Rating == 2) %>%
dplyr::select(-University.Rating)
# Búsqueda de SVR con kernel polinomial con validación cruzada 10 folds, Admissions.2 con 7 variables
modelo.2$tune <- tune.svm(Chance.of.Admit~., data = Admissions.2, kernel = "polynomial",
degree = c(2:4),
gamma = seq(0.025, 0.15, 0.025),
cost = 2^(0:4))
modelo.2$tune
# Búsqueda de SVR con kernel polinomial con validación cruzada 10 folds, Admissions.2 con 7 variables
modelo.2$tune <- tune.svm(Chance.of.Admit~., data = Admissions.2, kernel = "polynomial",
degree = c(2:4),
gamma = seq(0.025, 0.15, 0.025),
cost = 2^(0:4))
modelo.2$tune
modelo.2$model <- svm(Chance.of.Admit~., Admissions.2,
kernel = "polynomial", degree = 3, gamma = 0.05, cost = 4)
get_model_results(Admissions.2, modelo.2$model)
modelo.2$model <- svm(Chance.of.Admit~., Admissions.2,
kernel = "polynomial", degree = 3, gamma = 0.075, cost = 2)
get_model_results(Admissions.2, modelo.2$model)
modelo.2$model <- svm(Chance.of.Admit~., Admissions.2,
kernel = "polynomial", degree = 4, gamma = 0.075, cost = 2)
get_model_results(Admissions.2, modelo.2$model)
modelo.2$model <- svm(Chance.of.Admit~., Admissions.2,
kernel = "polynomial", degree = 3, gamma = 0.075, cost = 2)
get_model_results(Admissions.2, modelo.2$model)
# Búsqueda de SVR con kernel RBF con validación cruzada 10 folds
# Admissions.2 con 7 variables
# Admissions.2 transformado con todas las variables
modelo.2$tune <- tune.svm(Chance.of.Admit~., data = Admissions.2,
gamma = seq(0.025, 0.15, 0.025),
cost = 2^(0:4))
modelo.2$tune
modelo.2$model <- svm(Chance.of.Admit~., Admissions.2,
gamma = 0.025, cost = 2)
get_model_results(Admissions.2, modelo.2$model)
# Función para obtener la transformación de features de Admissions
# Separa por Admissions$University.Rating = university.rating
# Genera las transformaciones y devuelve el dataframe final para entrenamiento
get.Admissions.features <- function (Admissions, university.rating) {
# Filtrar por University.Rating
Admissions <- Admissions %>%
dplyr::filter(University.Rating == university.rating) %>%
dplyr::select(-University.Rating)
# Obtener datos transformados
sq.Admissions <- get_transformed_df(Admissions, c("Chance.of.Admit", "Research"), function(x) x^2, "sq")
cub.Admissions <- get_transformed_df(Admissions, c("Chance.of.Admit", "Research"), function(x) x^3, "cube")
inv.Admissions <- get_transformed_df(Admissions, c("Chance.of.Admit", "Research"), function(x) 1/x, "inv")
#log.Admissions <- get_transformed_df(Admissions, c("Chance.of.Admit", "Research"), function(x) log(x), "log")
# Interacciones
intGRE.Admissions <- Admissions$GRE.Score * get_transformed_df(Admissions,
c("Chance.of.Admit", "GRE.Score", "Research"),
function(x) x, "int.GRE")
intTOEFL.Admissions <- Admissions$TOEFL.Score * get_transformed_df(Admissions,
c("Chance.of.Admit", "GRE.Score", "Research", "TOEFL.Score"),
function(x) x, "int.TOEFL")
int.Admissions <- Admissions$Research * get_transformed_df(Admissions,
c("Chance.of.Admit", "Research"),
function(x) x, "int.Research")
intCGPA.Admissions <- Admissions$GRE.Score * get_transformed_df(Admissions,
c("Chance.of.Admit", "CGPA", "Research"),
function(x) x, "int.CGPA")
# Dataframes finales para entrenamiento
if (university.rating == 1) {
final.Admissions <- cbind(Admissions, sq.Admissions, intGRE.Admissions, intTOEFL.Admissions)
} else if (university.rating == 2) {
final.Admissions <- cbind(Admissions, sq.Admissions, cub.Admissions, intCGPA.Admissions, intTOEFL.Admissions) #%>%
#dplyr::select(-contains("SOP")) #%>%
#mutate(SOP = factor(Admissions$SOP))
} else if (university.rating == 5) {
final.Admissions <- cbind(Admissions, sq.Admissions, intGRE.Admissions, intTOEFL.Admissions, inv.Admissions)
} else {
final.Admissions <- cbind(Admissions, sq.Admissions, intGRE.Admissions, intTOEFL.Admissions, int.Admissions, inv.Admissions)
}
# Devolver el dataframe final
return(final.Admissions)
}
# Transformaciones para algoritmo genético
Admissions.2 <- get.Admissions.features(Admissions, university.rating = 2)
View(Admissions.2)
# Búsqueda de SVR con kernel polinomial con validación cruzada 10 folds,
# Admissions.2 con 7 variables
# Admissions.2 transformado con todas las variables
modelo.2$tune <- tune.svm(Chance.of.Admit~., data = Admissions.2, kernel = "polynomial",
degree = c(2:4),
gamma = seq(0.025, 0.15, 0.025),
cost = 2^(0:4))
modelo.2$tune
modelo.2$model <- svm(Chance.of.Admit~., Admissions.2,
kernel = "polynomial", degree = 3, gamma = 0.025, cost = 1)
get_model_results(Admissions.2, modelo.2$model)
# Búsqueda de SVR con kernel RBF con validación cruzada 10 folds
# Admissions.2 con 7 variables
# Admissions.2 transformado con todas las variables
modelo.2$tune <- tune.svm(Chance.of.Admit~., data = Admissions.2,
gamma = seq(0.025, 0.15, 0.025),
cost = 2^(0:4))
modelo.2$tune
modelo.2$model <- svm(Chance.of.Admit~., Admissions.2,
gamma = 0.025, cost = 2)
get_model_results(Admissions.2, modelo.2$model)
gen.hist.2$final.inputs
# Obtener el modelo
# Admissions.2 con todas las transformaciones
modelo.2 <- get_model_fitness(Admissions.2, predictors = gen.hist.2$final.inputs, label="Chance.of.Admit")
get_model_results(Admissions.2, modelo.2$model)
# Obtener el RMSE
modelo.3 <- get_model_fitness(Admissions.3, predictors = gen.hist.3$final.inputs, label="Chance.of.Admit")
get_model_results(Admissions.3, modelo.3$model)
get_model_results(Admissions.3, modelo.3$model)
modelo.3$tune <- tune.svm(Chance.of.Admit~., data = Admissions.3, kernel = "polynomial",
degree = c(2:4),
gamma = seq(0.025, 0.1, 0.025),
cost = 2^(0:4))
modelo.3$tune
modelo.3$model <- svm(Chance.of.Admit~., Admissions.3,
kernel = "polynomial", degree = 3, gamma = 0.025, cost = 1)
get_model_results(Admissions.3, modelo.3$model)
get_model_results(Admissions.4, modelo.4$model)
get_model_results(Admissions.5, modelo.5$model)
# Variables en niveles para los modelos de SVR
Admissions.3 <- Admissions %>%
dplyr::filter(University.Rating == 3) %>%
dplyr::select(-University.Rating)
# - Prueba con Admissions.3 con todas las variables
# - Prueba con Admissions.3 con 7 variables
modelo.3$tune <- tune.svm(Chance.of.Admit~., data = Admissions.3, kernel = "polynomial",
degree = c(2:4),
gamma = seq(0.025, 0.1, 0.025),
cost = 2^(0:4))
modelo.3$tune
modelo.3$model <- svm(Chance.of.Admit~., Admissions.3,
kernel = "polynomial", degree = 3, gamma = 0.075, cost = 8)
get_model_results(Admissions.3, modelo.3$model)
pred.1 <- tibble(y = Admissions.1$Chance.of.Admit, yhat = predict(modelo.1$model, Admissions.1), Modelo = 1)
pred.2 <- tibble(y = Admissions.2$Chance.of.Admit, yhat = predict(modelo.2$model, Admissions.2), Modelo = 2)
pred.3 <- tibble(y = Admissions.3$Chance.of.Admit, yhat = predict(modelo.3$model, Admissions.3), Modelo = 3)
pred.4 <- tibble(y = Admissions.4$Chance.of.Admit, yhat = predict(modelo.4$model, Admissions.4), Modelo = 4)
pred.5 <- tibble(y = Admissions.5$Chance.of.Admit, yhat = predict(modelo.5$model, Admissions.5), Modelo = 5)
training.results <- bind_rows(pred.1, pred.2, pred.3, pred.4, pred.5)
model.results <- training.results %>%
mutate(e2 = (y - yhat)^2) %>%
group_by(Modelo) %>%
summarise(RMSE = sqrt(mean(e2)))
model.results
model.results <- training.results %>%
mutate(e2 = (y - yhat)^2) %>%
summarise(RMSE = sqrt(mean(e2)))
model.results
model.results <- training.results %>%
mutate(e2 = (y - yhat)^2) %>%
summarise(RMSE = sqrt(mean(e2))) %>%
print()
model.results <- training.results %>%
mutate(e2 = (y - yhat)^2) %>%
group_by(Modelo) %>%
summarise(RMSE = sqrt(mean(e2))) %>%
print()
model.results <- training.results %>%
mutate(e2 = (y - yhat)^2) %>%
summarise(RMSE = sqrt(mean(e2))) %>%
print()
# Obtener el RMSE
modelo.1 <- get_model_fitness(Admissions1, predictors = gen.hist.1$final.inputs, label="Chance.of.Admit")
get_model_results(Admissions.1, modelo.1$model)
# Obtener el modelo
# Admissions.2 con todas las transformaciones
modelo.2 <- get_model_fitness(Admissions.2, predictors = gen.hist.2$final.inputs, label="Chance.of.Admit")
get_model_results(Admissions.2, modelo.2$model)
# Transformaciones de todas las variables
Admissions.3 <- get.Admissions.features(Admissions, university.rating = 3)
# Obtener el RMSE
modelo.3 <- get_model_fitness(Admissions.3, predictors = gen.hist.3$final.inputs, label="Chance.of.Admit")
get_model_results(Admissions.3, modelo.3$model)
# Obtener el RMSE
modelo.4 <- get_model_fitness(Admissions.4, predictors = gen.hist.4$final.inputs, label="Chance.of.Admit")
get_model_results(Admissions.4, modelo.4$model)
# Obtener el RMSE
modelo.5 <- get_model_fitness(Admissions.5, predictors = gen.hist.5$final.inputs, label="Chance.of.Admit")
get_model_results(Admissions.5, modelo.5$model)
pred.1 <- tibble(y = Admissions.1$Chance.of.Admit, yhat = predict(modelo.1$model, Admissions.1), Modelo = 1)
pred.2 <- tibble(y = Admissions.2$Chance.of.Admit, yhat = predict(modelo.2$model, Admissions.2), Modelo = 2)
pred.3 <- tibble(y = Admissions.3$Chance.of.Admit, yhat = predict(modelo.3$model, Admissions.3), Modelo = 3)
pred.4 <- tibble(y = Admissions.4$Chance.of.Admit, yhat = predict(modelo.4$model, Admissions.4), Modelo = 4)
pred.5 <- tibble(y = Admissions.5$Chance.of.Admit, yhat = predict(modelo.5$model, Admissions.5), Modelo = 5)
training.results <- bind_rows(pred.1, pred.2, pred.3, pred.4, pred.5)
get_model_results <- function(data, modelobj) {
y <- data$Chance.of.Admit
yhat <- predict(modelobj, data)
rmse = sqrt(mean((y - yhat)^2))
return(rmse)
}
model.results <- training.results %>%
mutate(e2 = (y - yhat)^2) %>%
group_by(Modelo) %>%
summarise(RMSE = sqrt(mean(e2))) %>%
print()
model.results <- training.results %>%
mutate(e2 = (y - yhat)^2) %>%
summarise(RMSE = sqrt(mean(e2))) %>%
print()
# Variables en niveles para los modelos de SVR
Admissions.3 <- Admissions %>%
dplyr::filter(University.Rating == 3) %>%
dplyr::select(-University.Rating)
# - Prueba con Admissions.3 con todas las variables
# - Prueba con Admissions.3 con 7 variables
modelo.3$tune <- tune.svm(Chance.of.Admit~., data = Admissions.3, kernel = "polynomial",
degree = c(2:4),
gamma = seq(0.025, 0.1, 0.025),
cost = 2^(0:4))
modelo.3$tune
modelo.3$model <- svm(Chance.of.Admit~., Admissions.3,
kernel = "polynomial", degree = 3, gamma = 0.075, cost = 8)
get_model_results(Admissions.3, modelo.3$model)
modelo.3$model <- svm(Chance.of.Admit~., Admissions.3,
kernel = "polynomial", degree = 3, gamma = 0.075, cost = 2)
get_model_results(Admissions.3, modelo.3$model)
modelo.3$model <- svm(Chance.of.Admit~., Admissions.3,
kernel = "polynomial", degree = 3, gamma = 0.075, cost = 8)
get_model_results(Admissions.3, modelo.3$model)
modelo.3$model <- svm(Chance.of.Admit~., Admissions.3,
kernel = "polynomial", degree = 3, gamma = 0.075, cost = 8)
pred.1 <- tibble(y = Admissions.1$Chance.of.Admit, yhat = predict(modelo.1$model, Admissions.1), Modelo = 1)
pred.2 <- tibble(y = Admissions.2$Chance.of.Admit, yhat = predict(modelo.2$model, Admissions.2), Modelo = 2)
pred.3 <- tibble(y = Admissions.3$Chance.of.Admit, yhat = predict(modelo.3$model, Admissions.3), Modelo = 3)
pred.4 <- tibble(y = Admissions.4$Chance.of.Admit, yhat = predict(modelo.4$model, Admissions.4), Modelo = 4)
pred.5 <- tibble(y = Admissions.5$Chance.of.Admit, yhat = predict(modelo.5$model, Admissions.5), Modelo = 5)
training.results <- bind_rows(pred.1, pred.2, pred.3, pred.4, pred.5)
get_model_results <- function(data, modelobj) {
y <- data$Chance.of.Admit
yhat <- predict(modelobj, data)
rmse = sqrt(mean((y - yhat)^2))
return(rmse)
}
model.results <- training.results %>%
mutate(e2 = (y - yhat)^2) %>%
group_by(Modelo) %>%
summarise(RMSE = sqrt(mean(e2))) %>%
print()
model.results <- training.results %>%
mutate(e2 = (y - yhat)^2) %>%
summarise(RMSE = sqrt(mean(e2))) %>%
print()
Admissions.test <- read.csv("econometria-ug-2019/test.csv")
# Para la clase university.rating = 1
Admissions.test.1 <- get.Admissions.features(Admissions.test, university.rating = 1)
pred.1 <- tibble(id = Admissions.test.1$id, `Chance of admit` = predict(modelo.1$model, Admissions.test.1))
# Para la clase university.rating = 2
Admissions.test.2 <- get.Admissions.features(Admissions.test, university.rating = 2)
pred.2 <- tibble(id = Admissions.test.2$id, `Chance of admit` = predict(modelo.2$model, Admissions.test.2))
# Para la clase university.rating = 3
Admissions.test.3 <- get.Admissions.features(Admissions.test, university.rating = 3)
pred.3 <- tibble(id = Admissions.test.3$id, `Chance of admit` = predict(modelo.3$model, Admissions.test.3))
pred.3
# Para la clase university.rating = 4
Admissions.test.4 <- get.Admissions.features(Admissions.test, university.rating = 4)
pred.4 <- tibble(id = Admissions.test.4$id, `Chance of admit` = predict(modelo.4$model, Admissions.test.4))
# Para la clase university.rating = 5
Admissions.test.5 <- get.Admissions.features(Admissions.test, university.rating = 5)
pred.5 <- tibble(id = Admissions.test.5$id, `Chance of admit` = predict(modelo.5$model, Admissions.test.5))
# Generar el dataframe de predicciones finales
submission <- bind_rows(pred.1, pred.2, pred.3, pred.4, pred.5) %>% arrange(id)
# Generar el dataframe de predicciones finales
submission <- bind_rows(pred.1, pred.2, pred.3, pred.4, pred.5) %>% arrange(id) %>% View()
str(submission)
submission
# Generar el dataframe de predicciones finales
submission <- bind_rows(pred.1, pred.2, pred.3, pred.4, pred.5) %>% arrange(id)
sum(submission$`Chance of admit` > 1)
sum(submission$`Chance of admit` > 1)
sum(submission$`Chance of admit` < 0)
# Generar el dataframe de predicciones finales
submission <- bind_rows(pred.1, pred.2, pred.3, pred.4, pred.5) %>% arrange(id)
View(submission)
write.csv(submission, "submissions/modelosUniversityRating-v2.csv", quote = FALSE, row.names = FALSE)
# Variables en niveles para los modelos de SVR
Admissions.3 <- Admissions %>%
dplyr::filter(University.Rating == 3) %>%
dplyr::select(-University.Rating)
modelo.3$model <- svm(Chance.of.Admit~., Admissions.3,
kernel = "polynomial", degree = 3, gamma = 0.075, cost = 8)
get_model_results(Admissions.3, modelo.3$model)
pred.3 <- tibble(y = Admissions.3$Chance.of.Admit, yhat = predict(modelo.3$model, Admissions.3), Modelo = 3)
training.results <- bind_rows(pred.1, pred.2, pred.3, pred.4, pred.5)
get_model_results <- function(data, modelobj) {
y <- data$Chance.of.Admit
yhat <- predict(modelobj, data)
rmse = sqrt(mean((y - yhat)^2))
return(rmse)
}
model.results <- training.results %>%
mutate(e2 = (y - yhat)^2) %>%
group_by(Modelo) %>%
summarise(RMSE = sqrt(mean(e2))) %>%
print()
pred.1 <- tibble(y = Admissions.1$Chance.of.Admit, yhat = predict(modelo.1$model, Admissions.1), Modelo = 1)
pred.2 <- tibble(y = Admissions.2$Chance.of.Admit, yhat = predict(modelo.2$model, Admissions.2), Modelo = 2)
pred.3 <- tibble(y = Admissions.3$Chance.of.Admit, yhat = predict(modelo.3$model, Admissions.3), Modelo = 3)
pred.4 <- tibble(y = Admissions.4$Chance.of.Admit, yhat = predict(modelo.4$model, Admissions.4), Modelo = 4)
pred.5 <- tibble(y = Admissions.5$Chance.of.Admit, yhat = predict(modelo.5$model, Admissions.5), Modelo = 5)
training.results <- bind_rows(pred.1, pred.2, pred.3, pred.4, pred.5)
get_model_results <- function(data, modelobj) {
y <- data$Chance.of.Admit
yhat <- predict(modelobj, data)
rmse = sqrt(mean((y - yhat)^2))
return(rmse)
}
model.results <- training.results %>%
mutate(e2 = (y - yhat)^2) %>%
group_by(Modelo) %>%
summarise(RMSE = sqrt(mean(e2))) %>%
print()
model.results <- training.results %>%
mutate(e2 = (y - yhat)^2) %>%
summarise(RMSE = sqrt(mean(e2))) %>%
print()
modelo.3$model <- svm(Chance.of.Admit~., Admissions.3,
kernel = "polynomial", degree = 3, gamma = 0.075, cost = 8)
get_model_results(Admissions.3, modelo.3$model)
model.results <- training.results %>%
mutate(e2 = (y - yhat)^2) %>%
group_by(Modelo) %>%
summarise(RMSE = sqrt(mean(e2))) %>%
print()
model.results <- training.results %>%
mutate(e2 = (y - yhat)^2) %>%
summarise(RMSE = sqrt(mean(e2))) %>%
print()
# Para la clase university.rating = 1
Admissions.test.1 <- get.Admissions.features(Admissions.test, university.rating = 1)
pred.1 <- tibble(id = Admissions.test.1$id, `Chance of admit` = predict(modelo.1$model, Admissions.test.1))
# Para la clase university.rating = 2
Admissions.test.2 <- get.Admissions.features(Admissions.test, university.rating = 2)
pred.2 <- tibble(id = Admissions.test.2$id, `Chance of admit` = predict(modelo.2$model, Admissions.test.2))
# Para la clase university.rating = 3
Admissions.test.3 <- get.Admissions.features(Admissions.test, university.rating = 3)
pred.3 <- tibble(id = Admissions.test.3$id, `Chance of admit` = predict(modelo.3$model, Admissions.test.3))
# Para la clase university.rating = 4
Admissions.test.4 <- get.Admissions.features(Admissions.test, university.rating = 4)
pred.4 <- tibble(id = Admissions.test.4$id, `Chance of admit` = predict(modelo.4$model, Admissions.test.4))
# Para la clase university.rating = 5
Admissions.test.5 <- get.Admissions.features(Admissions.test, university.rating = 5)
pred.5 <- tibble(id = Admissions.test.5$id, `Chance of admit` = predict(modelo.5$model, Admissions.test.5))
# Generar el dataframe de predicciones finales
submission <- bind_rows(pred.1, pred.2, pred.3, pred.4, pred.5) %>% arrange(id)
sum(submission$`Chance of admit` < 0)
sum(submission$`Chance of admit` > 1)
write.csv(submission, "submissions/modelosUniversityRating-v3.csv", quote = FALSE, row.names = FALSE)
# Obtener el RMSE
modelo.3 <- get_model_fitness(Admissions.3, predictors = gen.hist.3$final.inputs, label="Chance.of.Admit")
get_model_results(Admissions.3, modelo.3$model)
gen.hist.3$final.inputs
str(Admissions.3)
# Obtener el RMSE
modelo.3 <- get_model_fitness(Admissions.3, predictors = gen.hist.3$final.inputs, label="Chance.of.Admit")
get_model_results(Admissions.3, modelo.3$model)
# Transformaciones de todas las variables
Admissions.3 <- get.Admissions.features(Admissions, university.rating = 3)
# Obtener el RMSE
modelo.3 <- get_model_fitness(Admissions.3, predictors = gen.hist.3$final.inputs, label="Chance.of.Admit")
get_model_results(Admissions.3, modelo.3$model)
pred.3 <- tibble(y = Admissions.3$Chance.of.Admit, yhat = predict(modelo.3$model, Admissions.3), Modelo = 3)
training.results <- bind_rows(pred.1, pred.2, pred.3, pred.4, pred.5)
get_model_results <- function(data, modelobj) {
y <- data$Chance.of.Admit
yhat <- predict(modelobj, data)
rmse = sqrt(mean((y - yhat)^2))
return(rmse)
}
model.results <- training.results %>%
mutate(e2 = (y - yhat)^2) %>%
group_by(Modelo) %>%
summarise(RMSE = sqrt(mean(e2))) %>%
print()
pred.1 <- tibble(y = Admissions.1$Chance.of.Admit, yhat = predict(modelo.1$model, Admissions.1), Modelo = 1)
pred.2 <- tibble(y = Admissions.2$Chance.of.Admit, yhat = predict(modelo.2$model, Admissions.2), Modelo = 2)
pred.3 <- tibble(y = Admissions.3$Chance.of.Admit, yhat = predict(modelo.3$model, Admissions.3), Modelo = 3)
pred.4 <- tibble(y = Admissions.4$Chance.of.Admit, yhat = predict(modelo.4$model, Admissions.4), Modelo = 4)
pred.5 <- tibble(y = Admissions.5$Chance.of.Admit, yhat = predict(modelo.5$model, Admissions.5), Modelo = 5)
training.results <- bind_rows(pred.1, pred.2, pred.3, pred.4, pred.5)
model.results <- training.results %>%
mutate(e2 = (y - yhat)^2) %>%
group_by(Modelo) %>%
summarise(RMSE = sqrt(mean(e2))) %>%
print()
model.results <- training.results %>%
mutate(e2 = (y - yhat)^2) %>%
summarise(RMSE = sqrt(mean(e2))) %>%
print()
# Transformaciones para algoritmo genético
Admissions.2 <- get.Admissions.features(Admissions, university.rating = 2)
modelo.2$model <- svm(Chance.of.Admit~., Admissions.2,
gamma = 0.025, cost = 2)
get_model_results(Admissions.2, modelo.2$model)
# Variables en niveles para los modelos de SVR
Admissions.3 <- Admissions %>%
dplyr::filter(University.Rating == 3) %>%
dplyr::select(-University.Rating)
modelo.3$model <- svm(Chance.of.Admit~., Admissions.3,
kernel = "polynomial", degree = 3, gamma = 0.075, cost = 8)
get_model_results(Admissions.3, modelo.3$model)
pred.1 <- tibble(y = Admissions.1$Chance.of.Admit, yhat = predict(modelo.1$model, Admissions.1), Modelo = 1)
pred.2 <- tibble(y = Admissions.2$Chance.of.Admit, yhat = predict(modelo.2$model, Admissions.2), Modelo = 2)
pred.3 <- tibble(y = Admissions.3$Chance.of.Admit, yhat = predict(modelo.3$model, Admissions.3), Modelo = 3)
pred.4 <- tibble(y = Admissions.4$Chance.of.Admit, yhat = predict(modelo.4$model, Admissions.4), Modelo = 4)
pred.5 <- tibble(y = Admissions.5$Chance.of.Admit, yhat = predict(modelo.5$model, Admissions.5), Modelo = 5)
training.results <- bind_rows(pred.1, pred.2, pred.3, pred.4, pred.5)
model.results <- training.results %>%
mutate(e2 = (y - yhat)^2) %>%
group_by(Modelo) %>%
summarise(RMSE = sqrt(mean(e2))) %>%
print()
model.results <- training.results %>%
mutate(e2 = (y - yhat)^2) %>%
summarise(RMSE = sqrt(mean(e2))) %>%
print()
# Para la clase university.rating = 1
Admissions.test.1 <- get.Admissions.features(Admissions.test, university.rating = 1)
pred.1 <- tibble(id = Admissions.test.1$id, `Chance of admit` = predict(modelo.1$model, Admissions.test.1))
# Para la clase university.rating = 2
Admissions.test.2 <- get.Admissions.features(Admissions.test, university.rating = 2)
pred.2 <- tibble(id = Admissions.test.2$id, `Chance of admit` = predict(modelo.2$model, Admissions.test.2))
# Para la clase university.rating = 3
Admissions.test.3 <- get.Admissions.features(Admissions.test, university.rating = 3)
pred.3 <- tibble(id = Admissions.test.3$id, `Chance of admit` = predict(modelo.3$model, Admissions.test.3))
# Para la clase university.rating = 4
Admissions.test.4 <- get.Admissions.features(Admissions.test, university.rating = 4)
pred.4 <- tibble(id = Admissions.test.4$id, `Chance of admit` = predict(modelo.4$model, Admissions.test.4))
# Para la clase university.rating = 5
Admissions.test.5 <- get.Admissions.features(Admissions.test, university.rating = 5)
pred.5 <- tibble(id = Admissions.test.5$id, `Chance of admit` = predict(modelo.5$model, Admissions.test.5))
# Generar el dataframe de predicciones finales
submission <- bind_rows(pred.1, pred.2, pred.3, pred.4, pred.5) %>% arrange(id)
sum(submission$`Chance of admit` < 0)
sum(submission$`Chance of admit` > 1)
write.csv(submission, "submissions/modelosUniversityRating-v3.csv", quote = FALSE, row.names = FALSE)
